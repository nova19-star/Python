import psycopg2
import re
from difflib import get_close_matches

# Connect to PostgreSQL database
conn = psycopg2.connect(
    host="localhost",
    database="medcura",  # replace with your database name
    user="postgres",     # replace with your username
    password="Sourav@345" # replace with your password
)
cursor = conn.cursor()

# List of predefined symptoms (same as in the database)
symptoms_list = ['Fever', 'Cough', 'Headache', 'Sore Throat', 'Stomach Pain', 'Fatigue', 'Cold', 'Back Pain','Diarrhea', 'Nausea', 'Anxiety', 'Allergic Reaction', 'Constipation', 'Skin Rash', 'Acid Reflux',
     'Dizziness', 'Insomnia', 'Joint Pain', 'Heartburn', 'Muscle Cramps', 'Eye Irritation', 'Shortness of Breath',
     'Chest Pain', 'Bloody Stool', 'Swelling', 'Weight Loss', 'Numbness or Tingling', 'Blood in Urine',
     'Fainting', 'High Blood Pressure', 'Cold Sweats', 'Itching', 'Mouth Sores', 'Bloating', 'Ear Pain',
    'Urinary Urgency']

# Function to get the closest match for symptoms (spell-checking)
def get_closest_symptom(user_input):
    matches = get_close_matches(user_input, symptoms_list, n=1)
    return matches[0] if matches else None

# Function to get symptom data from the database
def get_symptom_data(symptom_name):
    cursor.execute("SELECT * FROM symptoms WHERE name = %s", (symptom_name,))
    return cursor.fetchone()

# Function to generate advice based on the symptom
def generate_advice(symptom_name):
    symptom_data = get_symptom_data(symptom_name)
    if symptom_data:
        description = symptom_data[2]  # Assuming description is in the third column
        advice = symptom_data[3]       # Assuming advice is in the fourth column
        medication = symptom_data[4]   # Assuming medication is in the fifth column
        severity = symptom_data[5]     # Assuming severity is in the sixth column

        response = f"Here is the advice for {symptom_name}:\n"
        response += f"Description:\n    - {description}\n"
        response += f"Advice:\n    - {advice}\n"
        response += f"Medication:\n    - {medication}\n"
        response += f"Severity Level:\n    - {severity}\n"
        response += "Disclaimer: This advice is not a substitute for professional medical advice.\n"
        return response
    else:
        return f"Sorry, I don't recognize the symptom '{symptom_name}'. Please check the spelling or try another one."

# Main function to interact with the user
def main():
    print("Welcome to the medical chatbot!")
    name = input("Enter your name: ")
    age = input("Enter your age: ")
    weight = input("Enter your weight: ")

    print(f"Hello {name}, let's proceed with the symptom check.")

    while True:
        symptom_input = input("\nEnter a symptom or a sentence with symptoms (or type 'exit' to quit): ").strip()

        if symptom_input.lower() == 'exit':
            print("Goodbye!")
            break

        # Using regular expressions to detect symptoms in the input sentence
        detected_symptoms = []
        for symptom in symptoms_list:
            # Search for the symptom in the input text (case-insensitive)
            if re.search(r'\b' + re.escape(symptom.lower()) + r'\b', symptom_input.lower()):
                detected_symptoms.append(symptom)

        # If no symptoms detected, inform the user
        if not detected_symptoms:
            print("Sorry, no symptoms detected. Please try again.")
        else:
            for symptom in detected_symptoms:
                response = generate_advice(symptom)
                print(response)

# Run the chatbot
if _name_ == "_main_":
    main()

# Close the database connection
cursor.close()
conn.close()